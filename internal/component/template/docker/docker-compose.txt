version: "3.8"

services:
  {{.AppName}}:
    container_name: "{{.AppName}}"
    restart: unless-stopped
    volumes:
      - .:/go/src/{{.Module}}
    build:
      context: .
      dockerfile: ./development/Dockerfile
      target: development
    depends_on:
      etcd:
        condition: service_healthy
      postgres:
        condition: service_healthy

  etcd:
    image: quay.io/coreos/etcd:v3.5.13
    container_name: etcd
    restart: unless-stopped
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - INITIAL_CLUSTER_TOKEN=etcd-cluster-token
    ports:
      - "2379:2379"
    volumes:
      - etcd_data:/etcd-data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2379/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  vault:
    image: vault:1.9.2
    container_name: vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  jaeger:
    container_name: "jaeger"
    restart: unless-stopped
    image: jaegertracing/all-in-one:1.57.0
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4318:4318"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686/api/traces"]
      interval: 10s
      timeout: 5s
      retries: 5

# {{if .MemcacheEnabled}}
#   memcached:
#     image: memcached:1.6.27
#     container_name: memcached
#     ports:
#       - "11211:11211"
#     command: memcached -m 64 -c 1024 -u root -I 1m -p 11211
# {{ end }}
#
# {{if .RedisEnabled}}
#   redis:
#     image: redis:7.2-alpine
#     container_name: redis
#     ports:
#       - "6379:6379"
#     command: redis-server --requirepass postgres
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# {{ end }}

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: {{.AppName}}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

# {{if .KafkaEnabled}}
#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.0.1
#     restart: unless-stopped
#     container_name: zookeeper
#     volumes:
#       - zk_data:/var/lib/zookeeper/data
#       - zk_log:/var/lib/zookeeper/log
#     ports:
#       - "2181:2181"
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 32181
#       ZOOKEEPER_TICK_TIME: 2000
#     healthcheck:
#       test: ["CMD", "nc", "-z", "localhost", "32181"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#
#   kafka:
#     container_name: kafka
#     image: confluentinc/cp-kafka:7.2.0
#     restart: unless-stopped
#     volumes:
#       - kafka_data:/var/lib/kafka/data
#       - kafka_secrets:/etc/kafka/secrets
#     depends_on:
#       - zookeeper
#     deploy:
#       resources:
#         limits:
#           cpus: "1"
#           memory: 1G
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
#       KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
#       KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://127.0.0.1:9094
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
#       KAFKA_DELETE_TOPIC_ENABLE: "true"
#       KAFKA_MIN_INSYNC_REPLICAS: 2
#     healthcheck:
#       test: ["CMD", "nc", "-z", "localhost", "9092"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#
#   kafka-ui:
#     image: provectuslabs/kafka-ui:v0.7.2
#     container_name: kafka-ui
#     restart: unless-stopped
#     ports:
#       - "8084:8080"
#     environment:
#       DYNAMIC_CONFIG_ENABLED: true
#       KAFKA_CLUSTERS_0_NAME: 'kafka_cluster'
#       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:9092'
#       KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:32181'
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     depends_on:
#       zookeeper:
#         condition: service_healthy
#       kafka:
#         condition: service_healthy
# {{ end }}

volumes:
  etcd_data:
  vault_data:
  postgres_data:
